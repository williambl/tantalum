plugins {
    id 'org.quiltmc.loom' version '0.12.+'
    id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

repositories {
    // Quilt mavens
    maven {
        name 'Quilt'
        url 'https://maven.quiltmc.org/repository/release'
    }

    maven {
        name 'ParchmentMC'
        url 'https://maven.parchmentmc.org'
    }

    maven {
        name = "CottonMC"
        url = "https://server.bbkr.space/artifactory/libs-release"
    }

    maven {
        name = 'Ladysnake Mods'
        url = 'https://ladysnake.jfrog.io/artifactory/mods'
    }

    maven {
        name 'JitPack'
        url 'https://jitpack.io'
    }
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"

    mappings loom.layered() {
        officialMojangMappings()
        //parchment("org.parchmentmc.data:parchment-${project.minecraft_version}:${project.parchment_version}@zip")
    }

    modImplementation "org.quiltmc:quilt-loader:${project.loader_version}"

    include implementation(annotationProcessor("com.github.LlamaLad7:MixinExtras:0.0.8"))

    modImplementation "org.quiltmc:qsl:${qsl_version}"
    modImplementation ("org.quiltmc.quilted-fabric-api:quilted-fabric-api:${qfapi_version}") {
        exclude(module: "fabric-loader")
    }

    modImplementation include("io.github.cottonmc:LibGui:${libgui_version}")

    modImplementation ("RebornCore:RebornCore-1.19:${rc_version}") {
        exclude(group: "net.fabricmc.fabric-api")
        exclude(module: "fabric-loader")
    }

    modApi include("teamreborn:energy:${energy_version}"){
        exclude(group: "net.fabricmc.fabric-api")
        exclude(module: "fabric-loader")
    }

    modImplementation("TechReborn:TechReborn-1.19:${tr_version}"){
        exclude(group: "net.fabricmc.fabric-api")
        exclude(module: "fabric-loader")
    }

    modImplementation include ("dev.onyxstudios.cardinal-components-api:cardinal-components-base:${cc_version}"){
        exclude(group: "net.fabricmc.fabric-api")
        exclude(module: "fabric-loader")
    }
    modImplementation include ("dev.onyxstudios.cardinal-components-api:cardinal-components-world:${cc_version}"){
        exclude(group: "net.fabricmc.fabric-api")
        exclude(module: "fabric-loader")
    }
    modImplementation include ("dev.onyxstudios.cardinal-components-api:cardinal-components-entity:${cc_version}"){
        exclude(group: "net.fabricmc.fabric-api")
        exclude(module: "fabric-loader")
    }
}

processResources {
    inputs.property "version", project.version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html

    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    archivesBaseName = project.archives_base_name
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            // add all the jars that should be included when publishing to maven
            artifact(remapJar) {
                builtBy remapJar
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}
